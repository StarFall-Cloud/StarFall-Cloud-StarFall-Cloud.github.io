<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>SpringBoot项目实战</title>
      <link href="/2023/12/28/SpringBoot%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98/"/>
      <url>/2023/12/28/SpringBoot%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98/</url>
      
        <content type="html"><![CDATA[<h5 id="SpringBoot查询数据"><a href="#SpringBoot查询数据" class="headerlink" title="SpringBoot查询数据"></a>SpringBoot查询数据</h5><p>1、pom.xml 引入 mybatis 依赖</p><pre><code class="xml">&lt;dependencies&gt;    &lt;dependency&gt;        &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;        &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;        &lt;version&gt;3.0.2&lt;/version&gt;    &lt;/dependency&gt;&lt;/dependencies&gt;</code></pre><p>2、entity包 -&gt; User 实体类</p><pre><code class="java">package com.demo.springbootfirst.entity;import lombok.Data;// Data注解，代替 Getter和 Setter 方法@Datapublic class User &#123;    private Integer id;    private String username;    private String password;    private String nickname;    private String email;    private String phone;    private String address;&#125;</code></pre><p>3、mapper包 -&gt; UserMapper 接口</p><pre><code class="java">package com.demo.springbootfirst.mapper;import com.demo.springbootfirst.entity.User;import org.apache.ibatis.annotations.Mapper;import org.apache.ibatis.annotations.Select;import java.util.List;@Mapperpublic interface UserMapper &#123;    @Select(&quot;select * from sys_user&quot;)    List&lt;User&gt; findAll();&#125;</code></pre><p>4、controller包 -&gt; UserController 类</p><pre><code class="java">package com.demo.springbootfirst.controller;import com.demo.springbootfirst.entity.User;import com.demo.springbootfirst.mapper.UserMapper;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.web.bind.annotation.GetMapping;import org.springframework.web.bind.annotation.RestController;import java.util.List;@RestControllerpublic class UserController &#123;    @Autowired    private UserMapper userMapper;    // GetMapping注解 依赖于 @RestController 注解实现数据查询    @GetMapping(&quot;/&quot;)    public List&lt;User&gt; index() &#123;        return userMapper.findAll();    &#125;&#125;</code></pre><p>5、SpringbootFirstApplication 测试类</p><pre><code class="java">package com.demo.springbootfirst;import org.springframework.boot.SpringApplication;import org.springframework.boot.autoconfigure.SpringBootApplication;import org.springframework.web.bind.annotation.RestController;@RestController@SpringBootApplicationpublic class SpringbootFirstApplication &#123;    public static void main(String[] args) &#123;        SpringApplication.run(SpringbootFirstApplication.class, args);    &#125;&#125;</code></pre><h4 id="前端跨域问题"><a href="#前端跨域问题" class="headerlink" title="前端跨域问题"></a>前端跨域问题</h4><p><img src="/SpringBoot%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98.assets/image-20231009154753421.png" alt="image-20231009154753421"></p><h4 id="Springboot跨域设置"><a href="#Springboot跨域设置" class="headerlink" title="Springboot跨域设置"></a>Springboot跨域设置</h4><pre><code class="java">package com.demo.springbootfirst.config;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.web.cors.CorsConfiguration;import org.springframework.web.cors.UrlBasedCorsConfigurationSource;import org.springframework.web.filter.CorsFilter;@Configurationpublic class CorsConfig &#123;    // 当前跨域请求最大有效时长。这里默认1天    private static final long MAX_AGE = 24 * 60 * 60;    @Bean    public CorsFilter corsFilter() &#123;        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();        CorsConfiguration corsConfiguration = new CorsConfiguration();        corsConfiguration.addAllowedOrigin(&quot;http://localhost/&quot;); // 1 设置访问源地址        corsConfiguration.addAllowedHeader(&quot;*&quot;); // 2 设置访问源请求头        corsConfiguration.addAllowedMethod(&quot;*&quot;); // 3 设置访问源请求方法        corsConfiguration.setMaxAge(MAX_AGE);        source.registerCorsConfiguration(&quot;/**&quot;, corsConfiguration); // 4 对接口配置跨域设置        return new CorsFilter(source);    &#125;&#125;</code></pre><h6 id="忽略某个字段，不展示给前端"><a href="#忽略某个字段，不展示给前端" class="headerlink" title="忽略某个字段，不展示给前端"></a>忽略某个字段，不展示给前端</h6><pre><code class="java">@JsonIgnore</code></pre><h4 id="MyBatis-Plus"><a href="#MyBatis-Plus" class="headerlink" title="MyBatis-Plus"></a>MyBatis-Plus</h4><p>实现多条件分页查询。</p><p>mybatis-plus 依赖</p><pre><code class="xml">&lt;!-- Mybatis-plus --&gt;&lt;dependencies&gt;    &lt;dependency&gt;        &lt;groupId&gt;com.baomidou&lt;/groupId&gt;        &lt;artifactId&gt;mybatis-plus-boot-starter&lt;/artifactId&gt;        &lt;version&gt;3.5.2&lt;/version&gt;    &lt;/dependency&gt;&lt;/dependencies&gt;</code></pre><p>MybatisPlusConfig.java</p><pre><code class="java">package com.demo.springbootfirst.config;import com.baomidou.mybatisplus.annotation.DbType;import com.baomidou.mybatisplus.extension.plugins.MybatisPlusInterceptor;import com.baomidou.mybatisplus.extension.plugins.inner.PaginationInnerInterceptor;import org.mybatis.spring.annotation.MapperScan;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;@Configuration@MapperScan(&quot;com.demo.springbootfirst.mapper&quot;)public class MybatisPlusConfig &#123;    /**     * 添加分页插件     */    @Bean    public MybatisPlusInterceptor mybatisPlusInterceptor() &#123;        MybatisPlusInterceptor interceptor = new MybatisPlusInterceptor();        interceptor.addInnerInterceptor(new PaginationInnerInterceptor(DbType.MYSQL));        //如果配置多个插件,切记分页最后添加        return interceptor;    &#125;&#125;</code></pre><h5 id="错误示例"><a href="#错误示例" class="headerlink" title="错误示例"></a>错误示例</h5><p><img src="/SpringBoot%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98.assets/image-20231009184817359.png" alt="image-20231009184817359"></p><pre><code class="java">package com.demo.springbootfirst.controller;import com.demo.springbootfirst.entity.User;import com.demo.springbootfirst.mapper.UserMapper;import com.demo.springbootfirst.service.UserService;import io.swagger.v3.oas.annotations.media.Schema;import io.swagger.v3.oas.annotations.tags.Tag;import lombok.extern.slf4j.Slf4j;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.beans.factory.annotation.Value;import org.springframework.web.bind.annotation.*;import java.util.HashMap;import java.util.List;import java.util.Map;@Slf4j@RestController@RequestMapping(&quot;/user&quot;)@Schema(name = &quot;&quot;, description = &quot;&quot;)@Tag(name = &quot;JsonController tags&quot;)public class UserController &#123;    @Autowired    private UserMapper userMapper;    @Autowired    private UserService userService;    // 新增和修改    @PostMapping    public boolean save(@RequestBody User user) &#123;        // 新增或者更新//        return userService.save(user);        return userService.saveUser(user);    &#125;    // 查询所有数据    @GetMapping    public List&lt;User&gt; findAll() &#123;        List&lt;User&gt; all = userMapper.findAll();        return all;    &#125;    @DeleteMapping(&quot;/&#123;id&#125;&quot;)    public Integer delete(@PathVariable Integer id) &#123;        return userMapper.deleteById(id);    &#125;    // 分页查询    // 接口路径：/user/page?pageNum=1&amp;pageSize=10    // @RequestParam接收    // limit第一个参数 = (pageNum - 1) * pageSize    // pageSize    @GetMapping(&quot;/page&quot;)    public Map&lt;String, Object&gt; findPage(@RequestParam Integer pageNum,                                        @RequestParam Integer pageSize,                                        @RequestParam String username) &#123;        pageNum = (pageNum - 1) * pageSize;        username = &quot;%&quot; + username + &quot;%&quot;;        List&lt;User&gt; data = userMapper.selectPage(pageNum, pageSize, username);        Integer total = userMapper.selectTotal(username);        Map&lt;String, Object&gt; res = new HashMap&lt;&gt;();        res.put(&quot;data&quot;, data);        res.put(&quot;total&quot;, total);        return res;    &#125;&#125;</code></pre><pre><code class="java">package com.demo.springbootfirst.controller;import com.demo.springbootfirst.entity.User;import com.demo.springbootfirst.mapper.UserMapper;import com.demo.springbootfirst.service.UserService;import io.swagger.v3.oas.annotations.Operation;import io.swagger.v3.oas.annotations.tags.Tag;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.web.bind.annotation.*;import java.util.HashMap;import java.util.List;import java.util.Map;@RestController@RequestMapping(value = &quot;/user&quot;)@Tag(name = &quot;user-controller&quot;, description = &quot;描述&quot;)public class UserController &#123;    @Autowired    private UserMapper userMapper;    @Autowired    private UserService userService;    // 新增和修改    @PostMapping    public boolean save(@RequestBody User user) &#123;        // 新增或者更新//        return userService.save(user);        return userService.saveUser(user);    &#125;    // 查询所有数据//    @GetMapping(&quot;/user&quot;)    @ResponseBody    @Operation(summary = &quot;获取用户信息&quot;, description = &quot;获取用户信息&quot;)    public List&lt;User&gt; findAll() &#123;        List&lt;User&gt; all = userMapper.findAll();        return all;    &#125;//    @DeleteMapping(&quot;/&#123;id&#125;&quot;)    public Integer delete(@PathVariable Integer id) &#123;        return userMapper.deleteById(id);    &#125;    // 分页查询    // 接口路径：/user/page?pageNum=1&amp;pageSize=10    // @RequestParam接收    // limit第一个参数 = (pageNum - 1) * pageSize    // pageSize//    @GetMapping(&quot;/page&quot;)    public Map&lt;String, Object&gt; findPage(@RequestParam Integer pageNum,                                        @RequestParam Integer pageSize,                                        @RequestParam String username) &#123;        pageNum = (pageNum - 1) * pageSize;        username = &quot;%&quot; + username + &quot;%&quot;;        List&lt;User&gt; data = userMapper.selectPage(pageNum, pageSize, username);        Integer total = userMapper.selectTotal(username);        Map&lt;String, Object&gt; res = new HashMap&lt;&gt;();        res.put(&quot;data&quot;, data);        res.put(&quot;total&quot;, total);        return res;    &#125;//    @PostMapping()//    public void addProduct() &#123;//        System.out.println(&quot;整合swagger嘻嘻！&quot;);//    &#125;&#125;</code></pre><h4 id="集成-Swagger-UI"><a href="#集成-Swagger-UI" class="headerlink" title="集成 Swagger-UI"></a>集成 Swagger-UI</h4><p>访问地址： <a href="http://localhost:8080/swagger-ui/index.html">http://localhost:8080/swagger-ui/index.html</a></p><h6 id="Swagger"><a href="#Swagger" class="headerlink" title="Swagger"></a>Swagger</h6><p>SwaggerConfig.java</p><pre><code class="java">package com.demo.springbootfirst.config;import io.swagger.v3.oas.models.ExternalDocumentation;import io.swagger.v3.oas.models.OpenAPI;import io.swagger.v3.oas.models.info.Info;import org.springdoc.core.models.GroupedOpenApi;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;@Configurationpublic class SwaggerConfig &#123;    @Bean    public OpenAPI springShopOpenAPI() &#123;        return new OpenAPI()                .info(new Info().title(&quot;项目平台接口文档&quot;)                        .description(&quot;接口描述&quot;)                        .version(&quot;2.0.0&quot;))                .externalDocs(new ExternalDocumentation().description(&quot;&quot;)                        .url(&quot;&quot;));    &#125;    @Bean    public GroupedOpenApi adminApi() &#123;        return GroupedOpenApi.builder()                //分组名                .group(&quot;admin&quot;)                //扫描路径，将路径下有swagger注解的接口解析到文档中                .packagesToScan(&quot;com.demo.springbootfirst.controller&quot;)                .build();    &#125;&#125;</code></pre><p>pom.xml 依赖</p><pre><code class="xml">&lt;dependencies&gt;        &lt;!-- Springdoc --&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.springdoc&lt;/groupId&gt;            &lt;artifactId&gt;springdoc-openapi-starter-webmvc-ui&lt;/artifactId&gt;            &lt;version&gt;2.1.0&lt;/version&gt;        &lt;/dependency&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.springdoc&lt;/groupId&gt;            &lt;artifactId&gt;springdoc-openapi-starter-common&lt;/artifactId&gt;            &lt;version&gt;2.1.0&lt;/version&gt;        &lt;/dependency&gt;&lt;/dependencies&gt;</code></pre><h5 id="vuex安装"><a href="#vuex安装" class="headerlink" title="vuex安装"></a>vuex安装</h5><p>npm i vuex@3(vue需要指定安装vuex@3版本) -S</p><p>store.js</p><pre><code class="js">import Vue from &quot;vue&quot;;import Vuex from &quot;vuex&quot;Vue.use(Vuex)const store = new Vuex.Store(&#123;    state:&#123;        currentPathName: &#39;&#39;    &#125;,    mutations: &#123;        setPath(state) &#123;            state.currentPathName = localStorage.getItem(&quot;currentPathName&quot;)        &#125;    &#125;&#125;)export default store</code></pre><p>引入vuex</p><pre><code class="js">import store from &#39;./store&#39;;new Vue(&#123;  router,  store,  render: h =&gt; h(App)&#125;).$mount(&#39;#app&#39;)</code></pre><p>router&#x2F;index.js</p><pre><code class="js">import Vue from &#39;vue&#39;import VueRouter from &#39;vue-router&#39;import store from &#39;@/store&#39;Vue.use(VueRouter)const routes = [  &#123;    path: &#39;/&#39;,    component: () =&gt; import(&#39;../views/Manager.vue&#39;),    redirect: &quot;/home&quot;,    children: [      &#123; path: &#39;home&#39;, name: &#39;首页&#39;, component: () =&gt; import(&#39;../views/Home.vue&#39;)&#125;,      &#123; path: &#39;user&#39;, name: &#39;用户管理&#39;, component: () =&gt; import(&#39;../views/User.vue&#39;)&#125;    ]  &#125;,  &#123;    path: &#39;/about&#39;,    name: &#39;About&#39;,    component: () =&gt; import(&#39;../views/About.vue&#39;)  &#125;]const router = new VueRouter(&#123;  mode: &#39;history&#39;,  base: process.env.BASE_URL,  routes&#125;)// 路由守卫router.beforeEach((to, from, next) =&gt; &#123;  localStorage.setItem(&quot;currentPathName&quot;, to.name) // 设置当前的路由名称，为了在Header组件中使用  store.commit(&quot;setPath&quot;) // 触发store的数据更新  next() // 放行路由&#125;)export default router</code></pre><p>Header.vue</p><pre><code class="vue">  computed: &#123;    currentPathName() &#123;      return this.$store.state.currentPathName; // 需要监听的数据    &#125;  &#125;,  watch: &#123; // 监听路由变化    currentPathName(newVal, oldVal) &#123;      console.log(newVal);    &#125;  &#125;// 使用      &lt;el-breadcrumb separator=&quot;/&quot; style=&quot;display: inline-block; margin-left: 10px;&quot;&gt;        &lt;el-breadcrumb-item :to=&quot;&#39;/&#39;&quot;&gt;首页&lt;/el-breadcrumb-item&gt;        &lt;el-breadcrumb-item&gt;&#123;&#123; currentPathName &#125;&#125;&lt;/el-breadcrumb-item&gt;      &lt;/el-breadcrumb&gt;</code></pre><p>Login.vue</p><pre><code class="vue">&lt;template&gt;  &lt;div class=&quot;wrapper&quot;&gt;    &lt;div style=&quot;margin: 200px auto; background-color: #fff; width: 350px; height: 300px; padding: 20px; border-radius: 10px;&quot;&gt;      &lt;div style=&quot;margin: 20px; text-align: center; font-size: 24px;&quot;&gt;&lt;b&gt;登录&lt;/b&gt;&lt;/div&gt;      &lt;el-input size=&quot;medium&quot; style=&quot;margin: 10px 0&quot; prefix-icon=&quot;el-icon-user&quot; v-model=&quot;user.username&quot;&gt;&lt;/el-input&gt;      &lt;el-input size=&quot;medium&quot; style=&quot;margin: 10px 0&quot; prefix-icon=&quot;el-icon-lock&quot; show-password v-model=&quot;user.password&quot;&gt;&lt;/el-input&gt;      &lt;div style=&quot;margin: 10px 0; text-align: right;&quot;&gt;        &lt;el-button type=&quot;primary&quot; size=&quot;small&quot; autocomplete=&quot;off&quot;&gt;登录&lt;/el-button&gt;        &lt;el-button type=&quot;waring&quot; size=&quot;small&quot; autocomplete=&quot;off&quot;&gt;注册&lt;/el-button&gt;      &lt;/div&gt;    &lt;/div&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default &#123;  name: &#39;Login&#39;,  data() &#123;    return &#123;      user: &#123;&#125;    &#125;  &#125;&#125;&lt;/script&gt;&lt;style&gt;.wrapper &#123;  height: 100vh;  background-image: linear-gradient(to bottom right, #fc466b, #3f5efb);  overflow: hidden;&#125;&lt;/style&gt;</code></pre><pre><code class="vue">&lt;template&gt;  &lt;div class=&quot;login&quot;&gt;    &lt;div class=&quot;mylogin&quot; align=&quot;center&quot;&gt;      &lt;h4&gt;登录&lt;/h4&gt;      &lt;el-form :model=&quot;loginForm&quot; :rules=&quot;loginRules&quot; ref=&quot;loginForm&quot; label-width=&quot;0px&quot;&gt;        &lt;el-form-item label=&quot;&quot; prop=&quot;account&quot; style=&quot;margin-top: 20px&quot;&gt;          &lt;el-row&gt;            &lt;el-col :span=&quot;2&quot;&gt;              &lt;span class=&quot;el-icon-s-custom&quot;&gt;&lt;/span&gt;            &lt;/el-col&gt;            &lt;el-col :span=&quot;22&quot;&gt;              &lt;el-input class=&quot;inps&quot; placeholder=&quot;账号&quot; v-model=&quot;loginForm.account&quot;&gt;              &lt;/el-input&gt;            &lt;/el-col&gt;          &lt;/el-row&gt;        &lt;/el-form-item&gt;        &lt;el-form-item label=&quot;&quot; prop=&quot;passWord&quot;&gt;          &lt;el-row&gt;            &lt;el-col :span=&quot;2&quot;&gt;              &lt;span class=&quot;el-icon-lock&quot;&gt;&lt;/span&gt;            &lt;/el-col&gt;            &lt;el-col :span=&quot;22&quot;&gt;              &lt;el-input class=&quot;inps&quot; type=&quot;password&quot; placeholder=&quot;密码&quot; v-model=&quot;loginForm.passWord&quot;&gt;&lt;/el-input&gt;            &lt;/el-col&gt;          &lt;/el-row&gt;        &lt;/el-form-item&gt;        &lt;el-form-item style=&quot;margin-top: 30px&quot;&gt;          &lt;el-button type=&quot;primary&quot; round class=&quot;submitBtn&quot; @click=&quot;submitForm&quot;&gt;登录          &lt;/el-button&gt;        &lt;/el-form-item&gt;        &lt;div class=&quot;unlogin&quot;&gt;          &lt;!-- &lt;router-link :to=&quot;&#123; path: &#39;/forgetpwd&#39; &#125;&quot;&gt; 忘记密码? &lt;/router-link&gt;          | --&gt;          &lt;router-link :to=&quot;&#123; path: &#39;/register&#39; &#125;&quot;&gt;            &lt;a href=&quot;register.vue&quot; target=&quot;_blank&quot; align=&quot;right&quot;&gt;注册新账号&lt;/a&gt;          &lt;/router-link&gt;        &lt;/div&gt;      &lt;/el-form&gt;    &lt;/div&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import &#123; mapMutations &#125; from &quot;vuex&quot;;export default &#123;  name: &quot;Login&quot;,  data: function () &#123;    return &#123;      loginForm: &#123;        account: &quot;&quot;,        passWord: &quot;&quot;,      &#125;,      loginRules: &#123;        account: [&#123; required: true, message: &quot;请输入账号&quot;, trigger: &quot;blur&quot; &#125;],        passWord: [&#123; required: true, message: &quot;请输入密码&quot;, trigger: &quot;blur&quot; &#125;],      &#125;,    &#125;;  &#125;,  methods: &#123;    ...mapMutations([&quot;changeLogin&quot;]),    submitForm() &#123;      const userAccount = this.loginForm.account;      const userPassword = this.loginForm.passWord;      if (!userAccount) &#123;        return this.$message(&#123;          type: &quot;error&quot;,          message: &quot;账号不能为空！&quot;,        &#125;);      &#125;      if (!userPassword) &#123;        return this.$message(&#123;          type: &quot;error&quot;,          message: &quot;密码不能为空！&quot;,        &#125;);      &#125;      console.log(&quot;用户输入的账号为：&quot;, userAccount);      console.log(&quot;用户输入的密码为：&quot;, userPassword);    &#125;,  &#125;,&#125;;&lt;/script&gt;&lt;style&gt;.login &#123;  width: 100vw;  padding: 0;  margin: 0;  height: 100vh;  font-size: 20px;  background-position: left top;  background-color: #242645;  color: #fff;  font-family: &quot;Source Sans Pro&quot;;  position: relative;&#125;.mylogin &#123;  width: 360px;  height: 320px;  position: absolute;  top: 0;  left: 0;  right: 0;  bottom: 0;  margin: auto;  padding: 50px 40px 40px 40px;  box-shadow: -15px 15px 15px rgba(6, 17, 47, 0.7);  opacity: 1;  background: linear-gradient(    230deg,    rgba(53, 57, 74, 0) 0%,    rgb(0, 0, 0) 100%  );&#125;.inps input &#123;  border: none;  color: #fff;  background-color: transparent;  font-size: 16px;&#125;.submitBtn &#123;  background-color: transparent;  color: #39f;  width: 200px;&#125;&lt;/style&gt;</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>“Test”</title>
      <link href="/2023/12/28/%E2%80%9CTest%E2%80%9D/"/>
      <url>/2023/12/28/%E2%80%9CTest%E2%80%9D/</url>
      
        <content type="html"><![CDATA[<h1 id="Hexo搭建Butterfly主题并快速美化"><a href="#Hexo搭建Butterfly主题并快速美化" class="headerlink" title="Hexo搭建Butterfly主题并快速美化"></a>Hexo搭建Butterfly主题并快速美化</h1>]]></content>
      
      
      
        <tags>
            
            <tag> 测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/12/28/hello-world/"/>
      <url>/2023/12/28/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
